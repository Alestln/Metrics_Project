services:
  metrics_project:
    image: metrics_api
    container_name: metrics_api
    build:
      context: .
      dockerfile: Metrics_Project/Dockerfile
    ports:
      - "8080:8080"
    environment:
      ConnectionStrings__Data: "Server=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    depends_on:
      migrations:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    networks:
      - my-network
  
  migrations:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    container_name: migrations
    working_dir: /app
    volumes:
      - ./.:/app
    environment:
      ConnectionStrings__Data: "Server=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "echo 'Waiting for DB...' && sleep 5 && 
                     echo 'Changing to project directory...' && cd Metrics_Project &&
                     echo 'Installing dotnet-ef tool...' && dotnet tool install --global dotnet-ef && 
                     export PATH=\"$$PATH:/root/.dotnet/tools\" && 
                     echo 'Applying migrations...' && dotnet ef database update"
    networks:
      - my-network
  
  postgres:
    image: postgres:17.4-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      EXPORTER_USER: ${EXPORTER_USER}
      EXPORTER_PASSWORD: ${EXPORTER_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d
    networks:
      - my-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
  
  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${EXPORTER_USER}:${EXPORTER_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    ports:
      - "9187:9187"
    volumes:
      - ./queries.yml:/etc/postgres_exporter/queries.yml
    command:
      - '--extend.query-path=/etc/postgres_exporter/queries.yml'
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my-network
  
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - postgres_exporter
    networks:
      - my-network
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - my-network
    volumes:
      - grafana_data:/var/lib/grafana

networks:
  my-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: